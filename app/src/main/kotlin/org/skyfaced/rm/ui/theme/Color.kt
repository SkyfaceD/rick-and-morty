package org.skyfaced.rm.ui.theme

import androidx.compose.material3.darkColorScheme
import androidx.compose.material3.lightColorScheme
import androidx.compose.ui.graphics.Color

private val RMLightPrimary = Color(0xFFB42813)
private val RMLightOnPrimary = Color(0xFFFFFFFF)
private val RMLightPrimaryContainer = Color(0xFFFFDAD3)
private val RMLightOnPrimaryContainer = Color(0xFF3F0300)
private val RMLightSecondary = Color(0xFF775650)
private val RMLightOnSecondary = Color(0xFFFFFFFF)
private val RMLightSecondaryContainer = Color(0xFFFFDAD3)
private val RMLightOnSecondaryContainer = Color(0xFF2C1511)
private val RMLightTertiary = Color(0xFF6F5C2E)
private val RMLightOnTertiary = Color(0xFFFFFFFF)
private val RMLightTertiaryContainer = Color(0xFFFAE0A6)
private val RMLightOnTertiaryContainer = Color(0xFF251A00)
private val RMLightError = Color(0xFFBA1A1A)
private val RMLightErrorContainer = Color(0xFFFFDAD6)
private val RMLightOnError = Color(0xFFFFFFFF)
private val RMLightOnErrorContainer = Color(0xFF410002)
private val RMLightBackground = Color(0xFFFFFBFF)
private val RMLightOnBackground = Color(0xFF201A19)
private val RMLightSurface = Color(0xFFFFFBFF)
private val RMLightOnSurface = Color(0xFF201A19)
private val RMLightSurfaceVariant = Color(0xFFF5DDD9)
private val RMLightOnSurfaceVariant = Color(0xFF534340)
private val RMLightOutline = Color(0xFF857370)
private val RMLightInverseOnSurface = Color(0xFFFBEEEB)
private val RMLightInverseSurface = Color(0xFF362F2D)
private val RMLightInversePrimary = Color(0xFFFFB4A6)
private val RMLightShadow = Color(0xFF000000)
private val RMLightSurfaceTint = Color(0xFFB42813)

private val RMDarkPrimary = Color(0xFFFFB4A6)
private val RMDarkOnPrimary = Color(0xFF660800)
private val RMDarkPrimaryContainer = Color(0xFF900F00)
private val RMDarkOnPrimaryContainer = Color(0xFFFFDAD3)
private val RMDarkSecondary = Color(0xFFE7BDB5)
private val RMDarkOnSecondary = Color(0xFF442A24)
private val RMDarkSecondaryContainer = Color(0xFF5D3F3A)
private val RMDarkOnSecondaryContainer = Color(0xFFFFDAD3)
private val RMDarkTertiary = Color(0xFFDDC48C)
private val RMDarkOnTertiary = Color(0xFF3D2E04)
private val RMDarkTertiaryContainer = Color(0xFF554519)
private val RMDarkOnTertiaryContainer = Color(0xFFFAE0A6)
private val RMDarkError = Color(0xFFFFB4AB)
private val RMDarkErrorContainer = Color(0xFF93000A)
private val RMDarkOnError = Color(0xFF690005)
private val RMDarkOnErrorContainer = Color(0xFFFFDAD6)
private val RMDarkBackground = Color(0xFF201A19)
private val RMDarkOnBackground = Color(0xFFEDE0DD)
private val RMDarkSurface = Color(0xFF201A19)
private val RMDarkOnSurface = Color(0xFFEDE0DD)
private val RMDarkSurfaceVariant = Color(0xFF534340)
private val RMDarkOnSurfaceVariant = Color(0xFFD8C2BE)
private val RMDarkOutline = Color(0xFFA08C89)
private val RMDarkInverseOnSurface = Color(0xFF201A19)
private val RMDarkInverseSurface = Color(0xFFEDE0DD)
private val RMDarkInversePrimary = Color(0xFFB42813)
private val RMDarkShadow = Color(0xFF000000)
private val RMDarkSurfaceTint = Color(0xFFFFB4A6)

val LightColorScheme = lightColorScheme(
    primary = RMLightPrimary,
    onPrimary = RMLightOnPrimary,
    primaryContainer = RMLightPrimaryContainer,
    onPrimaryContainer = RMLightOnPrimaryContainer,
    secondary = RMLightSecondary,
    onSecondary = RMLightOnSecondary,
    secondaryContainer = RMLightSecondaryContainer,
    onSecondaryContainer = RMLightOnSecondaryContainer,
    tertiary = RMLightTertiary,
    onTertiary = RMLightOnTertiary,
    tertiaryContainer = RMLightTertiaryContainer,
    onTertiaryContainer = RMLightOnTertiaryContainer,
    error = RMLightError,
    errorContainer = RMLightErrorContainer,
    onError = RMLightOnError,
    onErrorContainer = RMLightOnErrorContainer,
    background = RMLightBackground,
    onBackground = RMLightOnBackground,
    surface = RMLightSurface,
    onSurface = RMLightOnSurface,
    surfaceVariant = RMLightSurfaceVariant,
    onSurfaceVariant = RMLightOnSurfaceVariant,
    outline = RMLightOutline,
    inverseOnSurface = RMLightInverseOnSurface,
    inverseSurface = RMLightInverseSurface,
    inversePrimary = RMLightInversePrimary,
    surfaceTint = RMLightSurfaceTint,
)

val DarkColorScheme = darkColorScheme(
    primary = RMDarkPrimary,
    onPrimary = RMDarkOnPrimary,
    primaryContainer = RMDarkPrimaryContainer,
    onPrimaryContainer = RMDarkOnPrimaryContainer,
    secondary = RMDarkSecondary,
    onSecondary = RMDarkOnSecondary,
    secondaryContainer = RMDarkSecondaryContainer,
    onSecondaryContainer = RMDarkOnSecondaryContainer,
    tertiary = RMDarkTertiary,
    onTertiary = RMDarkOnTertiary,
    tertiaryContainer = RMDarkTertiaryContainer,
    onTertiaryContainer = RMDarkOnTertiaryContainer,
    error = RMDarkError,
    errorContainer = RMDarkErrorContainer,
    onError = RMDarkOnError,
    onErrorContainer = RMDarkOnErrorContainer,
    background = RMDarkBackground,
    onBackground = RMDarkOnBackground,
    surface = RMDarkSurface,
    onSurface = RMDarkOnSurface,
    surfaceVariant = RMDarkSurfaceVariant,
    onSurfaceVariant = RMDarkOnSurfaceVariant,
    outline = RMDarkOutline,
    inverseOnSurface = RMDarkInverseOnSurface,
    inverseSurface = RMDarkInverseSurface,
    inversePrimary = RMDarkInversePrimary,
    surfaceTint = RMDarkSurfaceTint,
)
